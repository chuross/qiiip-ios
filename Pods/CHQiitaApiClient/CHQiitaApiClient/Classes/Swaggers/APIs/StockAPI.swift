//
// StockAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class StockAPI: APIBase {
    /**

     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func itemsItemIdStockDelete(itemId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        itemsItemIdStockDeleteWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**

     - parameter itemId: (path)  
     - returns: Observable<Void>
     */
    open class func itemsItemIdStockDelete(itemId: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            itemsItemIdStockDelete(itemId: itemId) { error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next())
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - DELETE /items/{item_id}/stock
     
     - parameter itemId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func itemsItemIdStockDeleteWithRequestBuilder(itemId: String) -> RequestBuilder<Void> {
        var path = "/items/{item_id}/stock"
        path = path.replacingOccurrences(of: "{item_id}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func itemsItemIdStockGet(itemId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        itemsItemIdStockGetWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**

     - parameter itemId: (path)  
     - returns: Observable<Void>
     */
    open class func itemsItemIdStockGet(itemId: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            itemsItemIdStockGet(itemId: itemId) { error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next())
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /items/{item_id}/stock
     
     - parameter itemId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func itemsItemIdStockGetWithRequestBuilder(itemId: String) -> RequestBuilder<Void> {
        var path = "/items/{item_id}/stock"
        path = path.replacingOccurrences(of: "{item_id}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func itemsItemIdStockPut(itemId: String, completion: @escaping ((_ error: Error?) -> Void)) {
        itemsItemIdStockPutWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**

     - parameter itemId: (path)  
     - returns: Observable<Void>
     */
    open class func itemsItemIdStockPut(itemId: String) -> Observable<Void> {
        return Observable.create { observer -> Disposable in
            itemsItemIdStockPut(itemId: itemId) { error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next())
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - PUT /items/{item_id}/stock
     
     - parameter itemId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func itemsItemIdStockPutWithRequestBuilder(itemId: String) -> RequestBuilder<Void> {
        var path = "/items/{item_id}/stock"
        path = path.replacingOccurrences(of: "{item_id}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
