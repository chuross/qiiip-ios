//
// ItemsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class ItemsAPI: APIBase {
    /**

     - parameter query: (query)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authenticatedUserItemsGet(query: String, page: Int32? = nil, perPage: Int32? = nil, completion: @escaping ((_ data: [Item]?,_ error: Error?) -> Void)) {
        authenticatedUserItemsGetWithRequestBuilder(query: query, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter query: (query)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - returns: Observable<[Item]>
     */
    open class func authenticatedUserItemsGet(query: String, page: Int32? = nil, perPage: Int32? = nil) -> Observable<[Item]> {
        return Observable.create { observer -> Disposable in
            authenticatedUserItemsGet(query: query, page: page, perPage: perPage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /authenticated_user/items
     - examples: [{example=[ {
  "tags" : [ {
    "name" : "aeiou"
  } ],
  "likes_count" : 5,
  "id" : "aeiou",
  "body" : "aeiou",
  "comments_count" : 5,
  "title" : "aeiou",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "rendered_body" : "aeiou",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "user" : {
    "id" : "aeiou",
    "items_count" : 1,
    "followees_count" : 0,
    "description" : "aeiou",
    "name" : "aeiou",
    "website_url" : "aeiou",
    "profile_image_url" : "aeiou",
    "followers_count" : 6
  },
  "url" : "aeiou"
} ], contentType=application/json}]
     
     - parameter query: (query)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)

     - returns: RequestBuilder<[Item]> 
     */
    open class func authenticatedUserItemsGetWithRequestBuilder(query: String, page: Int32? = nil, perPage: Int32? = nil) -> RequestBuilder<[Item]> {
        let path = "/authenticated_user/items"
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "query": query, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Item]>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter query: (query)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func itemsGet(query: String, page: Int32? = nil, perPage: Int32? = nil, completion: @escaping ((_ data: [Item]?,_ error: Error?) -> Void)) {
        itemsGetWithRequestBuilder(query: query, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter query: (query)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - returns: Observable<[Item]>
     */
    open class func itemsGet(query: String, page: Int32? = nil, perPage: Int32? = nil) -> Observable<[Item]> {
        return Observable.create { observer -> Disposable in
            itemsGet(query: query, page: page, perPage: perPage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /items
     - examples: [{example=[ {
  "tags" : [ {
    "name" : "aeiou"
  } ],
  "likes_count" : 5,
  "id" : "aeiou",
  "body" : "aeiou",
  "comments_count" : 5,
  "title" : "aeiou",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "rendered_body" : "aeiou",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "user" : {
    "id" : "aeiou",
    "items_count" : 1,
    "followees_count" : 0,
    "description" : "aeiou",
    "name" : "aeiou",
    "website_url" : "aeiou",
    "profile_image_url" : "aeiou",
    "followers_count" : 6
  },
  "url" : "aeiou"
} ], contentType=application/json}]
     
     - parameter query: (query)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)

     - returns: RequestBuilder<[Item]> 
     */
    open class func itemsGetWithRequestBuilder(query: String, page: Int32? = nil, perPage: Int32? = nil) -> RequestBuilder<[Item]> {
        let path = "/items"
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "query": query, 
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Item]>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter itemId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func itemsItemIdGet(itemId: String, completion: @escaping ((_ data: Item?,_ error: Error?) -> Void)) {
        itemsItemIdGetWithRequestBuilder(itemId: itemId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter itemId: (path)  
     - returns: Observable<Item>
     */
    open class func itemsItemIdGet(itemId: String) -> Observable<Item> {
        return Observable.create { observer -> Disposable in
            itemsItemIdGet(itemId: itemId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /items/{item_id}
     - examples: [{example={
  "tags" : [ {
    "name" : "aeiou"
  } ],
  "likes_count" : 5,
  "id" : "aeiou",
  "body" : "aeiou",
  "comments_count" : 5,
  "title" : "aeiou",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "rendered_body" : "aeiou",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "user" : {
    "id" : "aeiou",
    "items_count" : 1,
    "followees_count" : 0,
    "description" : "aeiou",
    "name" : "aeiou",
    "website_url" : "aeiou",
    "profile_image_url" : "aeiou",
    "followers_count" : 6
  },
  "url" : "aeiou"
}, contentType=application/json}]
     
     - parameter itemId: (path)  

     - returns: RequestBuilder<Item> 
     */
    open class func itemsItemIdGetWithRequestBuilder(itemId: String) -> RequestBuilder<Item> {
        var path = "/items/{item_id}"
        path = path.replacingOccurrences(of: "{item_id}", with: "\(itemId)", options: .literal, range: nil)
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Item>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tagId: (path)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tagsTagIdItemsGet(tagId: String, page: Int32? = nil, perPage: Int32? = nil, completion: @escaping ((_ data: [Item]?,_ error: Error?) -> Void)) {
        tagsTagIdItemsGetWithRequestBuilder(tagId: tagId, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter tagId: (path)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - returns: Observable<[Item]>
     */
    open class func tagsTagIdItemsGet(tagId: String, page: Int32? = nil, perPage: Int32? = nil) -> Observable<[Item]> {
        return Observable.create { observer -> Disposable in
            tagsTagIdItemsGet(tagId: tagId, page: page, perPage: perPage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /tags/{tag_id}/items
     - examples: [{example=[ {
  "tags" : [ {
    "name" : "aeiou"
  } ],
  "likes_count" : 5,
  "id" : "aeiou",
  "body" : "aeiou",
  "comments_count" : 5,
  "title" : "aeiou",
  "updated_at" : "2000-01-23T04:56:07.000+00:00",
  "rendered_body" : "aeiou",
  "created_at" : "2000-01-23T04:56:07.000+00:00",
  "user" : {
    "id" : "aeiou",
    "items_count" : 1,
    "followees_count" : 0,
    "description" : "aeiou",
    "name" : "aeiou",
    "website_url" : "aeiou",
    "profile_image_url" : "aeiou",
    "followers_count" : 6
  },
  "url" : "aeiou"
} ], contentType=application/json}]
     
     - parameter tagId: (path)  
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)

     - returns: RequestBuilder<[Item]> 
     */
    open class func tagsTagIdItemsGetWithRequestBuilder(tagId: String, page: Int32? = nil, perPage: Int32? = nil) -> RequestBuilder<[Item]> {
        var path = "/tags/{tag_id}/items"
        path = path.replacingOccurrences(of: "{tag_id}", with: "\(tagId)", options: .literal, range: nil)
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Item]>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
