//
// TagsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class TagsAPI: APIBase {
    /**

     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tagsGet(page: Int32? = nil, perPage: Int32? = nil, completion: @escaping ((_ data: [Tag]?,_ error: Error?) -> Void)) {
        tagsGetWithRequestBuilder(page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)
     - returns: Observable<[Tag]>
     */
    open class func tagsGet(page: Int32? = nil, perPage: Int32? = nil) -> Observable<[Tag]> {
        return Observable.create { observer -> Disposable in
            tagsGet(page: page, perPage: perPage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /tags
     - examples: [{example=[ {
  "name" : "aeiou"
} ], contentType=application/json}]
     
     - parameter page: (query)  (optional, default to 1)
     - parameter perPage: (query)  (optional, default to 1)

     - returns: RequestBuilder<[Tag]> 
     */
    open class func tagsGetWithRequestBuilder(page: Int32? = nil, perPage: Int32? = nil) -> RequestBuilder<[Tag]> {
        let path = "/tags"
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "page": page?.encodeToJSON(), 
            "per_page": perPage?.encodeToJSON()
        ])
        

        let requestBuilder: RequestBuilder<[Tag]>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tagId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tagsTagIdGet(tagId: String, completion: @escaping ((_ data: Tag?,_ error: Error?) -> Void)) {
        tagsTagIdGetWithRequestBuilder(tagId: tagId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter tagId: (path)  
     - returns: Observable<Tag>
     */
    open class func tagsTagIdGet(tagId: String) -> Observable<Tag> {
        return Observable.create { observer -> Disposable in
            tagsTagIdGet(tagId: tagId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     - GET /tags/{tag_id}
     - examples: [{example={
  "name" : "aeiou"
}, contentType=application/json}]
     
     - parameter tagId: (path)  

     - returns: RequestBuilder<Tag> 
     */
    open class func tagsTagIdGetWithRequestBuilder(tagId: String) -> RequestBuilder<Tag> {
        var path = "/tags/{tag_id}"
        path = path.replacingOccurrences(of: "{tag_id}", with: "\(tagId)", options: .literal, range: nil)
        let URLString = CHQiitaApiClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Tag>.Type = CHQiitaApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
